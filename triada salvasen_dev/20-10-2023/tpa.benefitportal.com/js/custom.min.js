var $SUMMERNOTE_TOOLBAR = [
        // [groupName, [list of button]]
        ['style', ['style']],
        ['undo', ['undo']],
        ['redo', ['redo']],
        ['font', ['bold', 'underline', 'clear']],
        ['fontname', ['fontname']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['lineheight', ['lineheight']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['table', ['table']],
        ['insert', ['link', 'picture', 'video', 'hr']],
        ['view', ['fullscreen', 'codeview']],
];
var $SUMMERNOTE_DISABLE_DRAG_DROP = true; 
$(document).ready(function() {
	$(function() {
			$(".preloader").fadeOut() 			
		}), $(".right-side-toggle").click(function() {
			$(".right-sidebar").slideDown(50), $(".right-sidebar").toggleClass("shw-rside"), $(".fxhdr").click(function() {
				$("body").toggleClass("fix-header")
			}), $(".fxsdr").click(function() {
				$("body").toggleClass("fix-sidebar")
			}), $("body").hasClass("fix-header") ? $(".fxhdr").attr("checked", !0) : $(".fxhdr").attr("checked", !1), $("body").hasClass("fix-sidebar") ? $(".fxsdr").attr("checked", !0) : $(".fxsdr").attr("checked", !1)
		}), $(function() {
			$(window).bind("load resize", function() {
				topOffset = 60, width = this.window.innerWidth > 0 ? this.window.innerWidth : this.screen.width, width < 768 ? ($("div.navbar-collapse").addClass("collapse"), topOffset = 100) : $("div.navbar-collapse").removeClass("collapse"), height = (this.window.innerHeight > 0 ? this.window.innerHeight : this.screen.height) - 1, height -= topOffset, height < 1 && (height = 1), height > topOffset && $("#page-wrapper").css("min-height", height + "px")
			});
			var e = window.location,
				i = $("ul.nav a").filter(function() {
					return this.href == e || 0 == e.href.indexOf(this.href)
				}).addClass("active").parent().parent().addClass("in").parent();
			i.is("li") && i.addClass("active")
		}), $(function() {
			$(window).bind("load resize", function() {
				width = this.window.innerWidth > 0 ? this.window.innerWidth : this.screen.width, width < 1279 ? ($("body").addClass("content-wrapper"), $(".open-close i").removeClass("icon-arrow-left-circle"), $(".sidebar-nav, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"), $(".logo span").hide()) : ($("body").removeClass("content-wrapper"), $(".open-close i").addClass("icon-arrow-left-circle"), $(".logo span").show())
			})
		}), $(".open-close").on("click", function() {
			$("body").hasClass("content-wrapper") ? ($("body").trigger("resize"), $(".sidebar-nav, .slimScrollDiv").css("overflow", "hidden").parent().css("overflow", "visible"), $("body").removeClass("content-wrapper"), $(".open-close i").addClass("icon-arrow-left-circle"), $(".logo span").show()) : ($("body").trigger("resize"), $(".sidebar-nav, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"), $("body").addClass("content-wrapper"), $(".open-close i").removeClass("icon-arrow-left-circle"), $(".logo span").hide())
		}),
		function(e, i, s) {
			var l = '[data-perform="panel-collapse"]';
			e(l).each(function() {
				var i = e(this),
					s = i.closest(".panel"),
					l = s.find(".panel-wrapper"),
					o = {
						toggle: !1
					};
				l.length || (l = s.children(".panel-heading").nextAll().wrapAll("<div/>").parent().addClass("panel-wrapper"), o = {}), l.collapse(o).on("hide.bs.collapse", function() {
					i.children("i").removeClass("fa-minus").addClass("fa-plus")
				}).on("show.bs.collapse", function() {
					i.children("i").removeClass("fa-plus").addClass("fa-minus")
				})
			}), e(s).on("click", l, function(i) {
				i.preventDefault();
				var s = e(this).closest(".panel"),
					l = s.find(".panel-wrapper");
				l.collapse("toggle")
			})
		}(jQuery, window, document),
		function(e, i, s) {
			var l = '[data-perform="panel-dismiss"]';
			e(s).on("click", l, function(i) {
				function l() {
					var i = s.parent();
					s.remove(), i.filter(function() {
						var i = e(this);
						return i.is('[class*="col-"]') && 0 === i.children("*").length
					}).remove()
				}
				i.preventDefault();
				var s = e(this).closest(".panel");
				l()
			})
		}(jQuery, window, document), $(function() {
			$('[data-toggle="tooltip"]').tooltip()
		}), $(function() {
			$('[data-toggle="popover"]').popover()
		}), $(".list-task li label").click(function() {
			$(this).toggleClass("task-done")
		}), $(".settings_box a").click(function() {
			$("ul.theme_color").toggleClass("theme_block")
		})
}), $(".collapseble").click(function() {
	$(".collapseblebox").fadeToggle(350)
}), 

$("body").trigger("resize"), $(".visited li a").click(function(e) {
	$(".visited li").removeClass("active");
	var i = $(this).parent();
	i.hasClass("active") || i.addClass("active"), e.preventDefault()
}), $("#to-recover").click(function() {
	$("#loginform").slideUp(), $("#recoverform").fadeIn()
}), $(".navbar-toggle").click(function() {
	$(".navbar-toggle i").toggleClass("ti-menu"), $(".navbar-toggle i").addClass("ti-close")
});

$(document).ready(function(){
	if ($("#side-menu").length) {
		$("#side-menu").metisMenu()
	}
	if ($(".slimscrollright").length) {
		 $(".slimscrollright").slimScroll({
			height: "100%",
			position: "right",
			size: "5px",
			color: "#dcdcdc"
		});
	}
	if ($(".slimscrollsidebar").length) {
		$(".slimscrollsidebar").slimScroll({
			height: "100%",
			position: "right",
			size: "0px",
			color: "#dcdcdc"
		});
	}
	if ($(".chat-list").length) {
		$(".chat-list").slimScroll({
			height: "100%",
			position: "right",
			size: "0px",
			color: "#dcdcdc"
		})
	}
	if ($(window).width() <= 767) {
		$('.panel-wrapper').removeClass('in');
		$('[data-perform="panel-collapse"] > i').removeClass('fa-minus');	
		$('[data-perform="panel-collapse"] > i').addClass('fa-plus');		
	};
});

/*!
 * jQuery Placeholder Plugin v2.3.1
 * https://github.com/mathiasbynens/jquery-placeholder
 *
 * Copyright 2011, 2015 Mathias Bynens
 * Released under the MIT license
 */
! function(e) {
	"function" == typeof define && define.amd ? define(["jquery"], e) : e("object" == typeof module && module.exports ? require("jquery") : jQuery)
}(function(e) {
	function t(t) {
		var a = {},
			l = /^jQuery\d+$/;
		return e.each(t.attributes, function(e, t) {
			t.specified && !l.test(t.name) && (a[t.name] = t.value)
		}), a
	}

	function a(t, a) {
		var l = this,
			o = e(this);
		if (l.value === o.attr(c ? "placeholder-x" : "placeholder") && o.hasClass(h.customClass))
			if (l.value = "", o.removeClass(h.customClass), o.data("placeholder-password")) {
				if (o = o.hide().nextAll('input[type="password"]:first').show().attr("id", o.removeAttr("id").data("placeholder-id")), t === !0) return o[0].value = a, a;
				o.focus()
			} else l == r() && l.select()
	}

	function l(l) {
		var r, o = this,
			d = e(this),
			s = o.id;
		if (!l || "blur" !== l.type || !d.hasClass(h.customClass))
			if ("" === o.value) {
				if ("password" === o.type) {
					if (!d.data("placeholder-textinput")) {
						try {
							r = d.clone().prop({
								type: "text"
							})
						} catch (n) {
							r = e("<input>").attr(e.extend(t(this), {
								type: "text"
							}))
						}
						r.removeAttr("name").data({
							"placeholder-enabled": !0,
							"placeholder-password": d,
							"placeholder-id": s
						}).bind("focus.placeholder", a), d.data({
							"placeholder-textinput": r,
							"placeholder-id": s
						}).before(r)
					}
					o.value = "", d = d.removeAttr("id").hide().prevAll('input[type="text"]:first').attr("id", d.data("placeholder-id")).show()
				} else {
					var i = d.data("placeholder-password");
					i && (i[0].value = "", d.attr("id", d.data("placeholder-id")).show().nextAll('input[type="password"]:last').hide().removeAttr("id"))
				}
				d.addClass(h.customClass), d[0].value = d.attr(c ? "placeholder-x" : "placeholder")
			} else d.removeClass(h.customClass)
	}

	function r() {
		try {
			return document.activeElement
		} catch (e) {}
	}
	var o, d, c = !1,
		s = "[object OperaMini]" === Object.prototype.toString.call(window.operamini),
		n = "placeholder" in document.createElement("input") && !s && !c,
		i = "placeholder" in document.createElement("textarea") && !s && !c,
		u = e.valHooks,
		p = e.propHooks,
		h = {};
	n && i ? (d = e.fn.placeholder = function() {
		return this
	}, d.input = !0, d.textarea = !0) : (d = e.fn.placeholder = function(t) {
		var r = {
			customClass: "placeholder"
		};
		return h = e.extend({}, r, t), this.filter((n ? "textarea" : ":input") + "[" + (c ? "placeholder-x" : "placeholder") + "]").not("." + h.customClass).not(":radio, :checkbox, [type=hidden]").bind({
			"focus.placeholder": a,
			"blur.placeholder": l
		}).data("placeholder-enabled", !0).trigger("blur.placeholder")
	}, d.input = n, d.textarea = i, o = {
		get: function(t) {
			var a = e(t),
				l = a.data("placeholder-password");
			return l ? l[0].value : a.data("placeholder-enabled") && a.hasClass(h.customClass) ? "" : t.value
		},
		set: function(t, o) {
			var d, c, s = e(t);
			return "" !== o && (d = s.data("placeholder-textinput"), c = s.data("placeholder-password"), d ? (a.call(d[0], !0, o) || (t.value = o), d[0].value = o) : c && (a.call(t, !0, o) || (c[0].value = o), t.value = o)), s.data("placeholder-enabled") ? ("" === o ? (t.value = o, t != r() && l.call(t)) : (s.hasClass(h.customClass) && a.call(t), t.value = o), s) : (t.value = o, s)
		}
	}, n || (u.input = o, p.value = o), i || (u.textarea = o, p.value = o), e(function() {
		e(document).delegate("form", "submit.placeholder", function() {
			var t = e("." + h.customClass, this).each(function() {
				a.call(this, !0, "")
			});
			setTimeout(function() {
				t.each(l)
			}, 10)
		})
	}), e(window).bind("beforeunload.placeholder", function() {
		var t = !0;
		try {
			"javascript:void(0)" === document.activeElement.toString() && (t = !1)
		} catch (a) {}
		t && e("." + h.customClass).each(function() {
			this.value = ""
		})
	}))
});
	
$(document).ready(function() {
	common_select();
	fRefresh();

	setTimeout(function() {
		if ($("body").hasClass("s-chrome") || $("body").hasClass("u-safari")) {
			$(".form-control").each(function() {
				$id = $(this).attr("id");
				if ($id != "") {
					if ($("#" + $id + ":-webkit-autofill").length > 0) {
						$("#" + $id).addClass('has-value');

					}
				}
			});
		}
	}, 1000);
	
});

$(document).off('keyup change blur', 'input.form-control');
$(document).on("keyup change blur", "input.form-control", function(e) {
	e.preventDefault();
	if ($(this).val() == "") {
    	$(this).removeClass('has-value');
    	$(this).parent().removeClass('has-value');
    }else{
    	$(this).addClass('has-value');
    	$(this).parent().addClass('has-value');
    }
});

$(document).off('change', 'select.form-control , .se_multiple_select , textarea.form-control');
$(document).on('change', 'select.form-control , .se_multiple_select , textarea.form-control' , function(e) {
	e.preventDefault();
    if ($(this).val() == "" || $(this).val() == null) {
    	$(this).removeClass('has-value');
    	$(this).parent().removeClass('has-value');
    }else{
    	$(this).addClass('has-value');
    	$(this).parent().addClass('has-value');
    }
});

$(document).off('focus', '.selectize-control');
$(document).on('focus', '.selectize-control', function() {
    $(this).addClass('has-value');
});
$(document).off('blur', '.selectize-control');
$(document).on('blur', '.selectize-control', function() {
    if ($(this).prev('input').val() != '')
        $(this).addClass('has-value');
    else
        $(this).removeClass('has-value');
});

function common_select(){
	if($(".table-responsive").find('select').hasClass('form-control')){
		$('select.form-control').selectpicker({ 
			container: 'body', 
			style:'btn-select',
			noneSelectedText: '',
			dropupAuto:false,
		});
		tableAction_Select();
	}else{
		$('select.form-control').selectpicker({ 
			style:'btn-select',
			noneSelectedText: '',
			dropupAuto:false,
		});
	}
	$('select.form-control').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
	  $(this).parent('.fixedCustom').addClass('has-value');
	});
	$('select.form-control').on('loaded.bs.select , changed.bs.select ', function(){
	  $('.dropdown-toggle').removeAttr('title');
	});
}

function fRefresh(){
    $("input.form-control , textarea.form-control").filter(function() {
      if ($(this).val() != "") {
        $(this).addClass('has-value');
      } else if($(this).hasClass('fixedCustom')){
	  }else{
        $(this).removeClass('has-value');
      }
    });

    $("select.form-control , .se_multiple_select").filter(function() {
      if ($(this).val() != "" && $(this).val() != null) {
        $(this).addClass('has-value');
        $(this).parent().addClass('has-value');
      } else if($(this).hasClass('fixedCustom')){
	  }else{
        $(this).removeClass('has-value');
        $(this).parent().removeClass('has-value');
      }
    });
}
function tableAction_Select(){
	$('.table-responsive').scroll(function(e){ 
		 e.stopPropagation();
		 $('.dropdown.bootstrap-select').removeClass('open');
		 $('ul.dropdown-menu-right').css("display", "none");
		 $('.datepicker-dropdown').css("display", "none");
		 $('.action > .dropdown').removeClass('open');
		 $('.action > .dropdown > .dropdown-toggle').attr("aria-expanded","false");
	});
}
/* floating design end*/

$(function() {
    //$(document).off('shown.bs.select','select.form-control');
    //$(document).on('shown.bs.select','select.form-control',function(e, clickedIndex, isSelected, previousValue) {
    $('select.form-control').on('shown.bs.select', function(e) {
        //$(".se_multiple_select .ms-drop").hide();
        //$(".se_multiple_select").multipleSelect('close');
        $(".se_multiple_select").each(function() {
            $id = $(this).attr('name');
            //console.log($id);
            $("select[name='" + $id + "']").multipleSelect('close');
        });
    });
});

/*broswer body tag add class css */
var getBrowser = function() {
	var OSName = "s-unknown-os";
	if (navigator.appVersion.indexOf("Win") != -1) OSName = "s-windows";
	if (navigator.appVersion.indexOf("Mac") != -1) OSName = "s-macos";
	if (navigator.appVersion.indexOf("X11") != -1) OSName = "s-unix";
	if (navigator.appVersion.indexOf("Linux") != -1) OSName = "s-linux";
	if ((navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf('OPR')) != -1) {
		return 's-opera ' + OSName;
	} else if (navigator.userAgent.indexOf("Chrome") != -1) {
		return 's-chrome ' + OSName;
	} else if (navigator.userAgent.indexOf("Safari") != -1) {
		return 's-safari ' + OSName;
	} else if (navigator.userAgent.indexOf("Firefox") != -1) {
		return 's-firefox ' + OSName;
	} else if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) //IF IE > 10
	{
		return 's-ie ' + OSName;
	} else {
		return 's-unknown ' + OSName;
	}
};
$(function() {
	$("body").addClass(getBrowser());
});

/* Tooltip */
$(function () {
  $('[data-toggle="tooltip"]').tooltip()
})

function disable_search() {
    if ($(".listing_search").filter(function() {
            return $(this).val();
        }).length > 0 || ($("#join_range").val() != '' && $(".date_picker").filter(function() {
            return $(this).val();
        }).length > 0)) {
        ajax_submit();
    } else {
      swal({
        text: '<br>Error: Data entry missing',
        showCancelButton: true,
        showConfirmButton: false,
        cancelButtonText: 'Close'
      });
    }
}

function b64ToUint6 (nChr) {

  return nChr > 64 && nChr < 91 ?
      nChr - 65
    : nChr > 96 && nChr < 123 ?
      nChr - 71
    : nChr > 47 && nChr < 58 ?
      nChr + 4
    : nChr === 43 ?
      62
    : nChr === 47 ?
      63
    :
      0;

}
function base64DecToArr (sBase64, nBlockSize) {

  var
    sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,
    nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2, aBytes = new Uint8Array(nOutLen);

  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
    nMod4 = nInIdx & 3;
    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
    if (nMod4 === 3 || nInLen - nInIdx === 1) {
      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
        aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
      }
      nUint24 = 0;
    }
  }

  return aBytes;
}
function UTF8ArrToStr (aBytes) {

  var sView = "";

  for (var nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {
    nPart = aBytes[nIdx];
    sView += String.fromCharCode(
      nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */
        /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */
        (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
      : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */
        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
      : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */
        (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
      : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */
        (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
      : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */
        (nPart - 192 << 6) + aBytes[++nIdx] - 128
      : /* nPart < 127 ? */ /* one byte */
        nPart
    );
  }

  return sView;

}
function removeItemByKeyValue(var_array,key,value) {
    if (value == undefined)
        return;

    for (var i in var_array) {
        if (var_array[i][key] == value) {
            var_array.splice(i,1);
            break;
        }
    }
};

uploadImageContent = function(image, editor) {
    var form = $('form')[0];
    var frmData = new FormData(form);
    frmData.append("image", image);
    console.log(frmData);

    $.ajax({
      url: "ajax_upload_summernote_image.php",
      cache: false,
      contentType: false,
      processData: false,
      data: frmData,
      type: "post",
    success: function(url) {
      var image = $('<img>').attr('src', url);
      $(editor).summernote('insertNode', image[0]);
    },
    error: function(data) {
      console.log(data);
    }
    });
  }

  deleteImage= function(src) {
    $.ajax({
        data: {src : src},
        type: "POST",
        url: "ajax_delete_summernote_image.php",
        cache: false,
        success: function(resp) {
            console.log(resp);
        }
    });
  }
if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
  window.document.addEventListener('touchmove', e => {
    if(e.scale !== undefined && e.scale !== 1) {
      e.preventDefault();
    }
  }, {passive: false});
}
function initCKEditor(elementId,isReadOnly=false,$ckeditor_height="350px"){
  var id_description = $("#" + elementId).attr('name');  
  CKEDITOR.replace(id_description, {
    allowedContent: true,
    toolbar: [
      ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat', '-', 'NumberedList', 'BulletedList', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'Link', 'Unlink', 'Format','Font', 'FontSize','TextColor', 'BGColor','Source','-','Maximize','Image' ],
    ],
    height : $ckeditor_height,
    readOnly : isReadOnly,
  });
}
function initSelectize(elementId,type,$_BOOTSTRAP_TAGS_MIN_LENGTH,$AGENT_ID){
	var $incr = '';
	if($AGENT_ID !== undefined && $AGENT_ID !==''){
		$incr = '&agent_id='+$AGENT_ID;
	}
	$('#'+elementId).selectize({
		plugins: ['remove_button'],
		valueField: 'value',
		labelField: 'text',
		searchField: 'text',
		options: [],
		create: false,
		closeAfterSelect: true,
		load: function(query, callback) {
		  if (query.length < $_BOOTSTRAP_TAGS_MIN_LENGTH) 
			return callback();
		  $.ajax({
			url: $HOST+'/ajax_general_autocomplete.php?type='+type+$incr,
			type: 'GET',
			dataType: 'json',
			data: { query: query },
			error: function() {
			  callback();
			},
			success: function(res) {
			  callback(res);
			}
		  });
		}
	});
}
function initSelectizeDropDown(elementId,type,$_BOOTSTRAP_TAGS_MIN_LENGTH,$AGENT_ID){
	var $incr = '';
    if($AGENT_ID !== undefined && $AGENT_ID !==''){
        $incr = '&agent_id='+$AGENT_ID;
    }
    $('#'+elementId).selectize({
        valueField: 'value',
        labelField: 'text',
        searchField: 'text',
        options: [],
        create: false,
        closeAfterSelect: true,
        maxItems: 1,
        tagType: "TAG_SELECT",
        load: function(query, callback) {
          if (query.length < $_BOOTSTRAP_TAGS_MIN_LENGTH) 
            return callback();
          $.ajax({
            url: $HOST+'/ajax_general_autocomplete.php?type='+type+$incr,
            type: 'GET',
            dataType: 'json',
            data: { query: query },
            error: function() {
              callback();
            },
            success: function(res) {
              callback(res);
            }
          });
          $('.selectize-dropdown-content .create').remove();
        }
    });
}
disableButton = function(this_obj){
	if(this_obj.children('i')){
		var originalClass = this_obj.children('i').attr('class');
		if(originalClass !== '' && originalClass !== undefined){
			this_obj.before('<input type="hidden" value="'+originalClass+'" id="___originalClass">').addClass();
		}
	}
	this_obj.attr('disabled','disabled');
	this_obj.html('<i class="fa fa-spinner fa-spin"></i> '+this_obj.text());
};
enableButton = function(this_obj){ 
	setTimeout(function(){
		  this_obj.removeAttr('disabled');
		  var originalClassVal = $("#___originalClass").val();
		  if(originalClassVal !== '' && originalClassVal !== undefined){
			this_obj.find('i').removeClass('fa fa-spinner fa-spin');
			this_obj.find('i').addClass(originalClassVal);
			$("#___originalClass").remove()
		  }else{
			this_obj.find('i').remove();
		  }
		
	},2500,this_obj);
};
function checkEmail(){
	$('.no_space').on("input", function () {
	    $(this).val($(this).val().replace(/ /g, ""));
	});
}
isValidNumber = function($this){
	$this.value = $this.value.replace(/[^0-9]/g, '').replace(/(\..*?)\..*/g, '$1');
}

function dropdown_pagination(...abc){
	var execute;
	$.each(abc,function(index,value) {
		if(typeof value=='function')
		{
			execute=value;
		}
		else{
			$(document).off('change', '#'+value+' .pagination_select');
			$(document).on('change', '#'+value+' .pagination_select', function (e) {
				e.stopPropagation();
				  var page_url = $(this).find('option:selected').attr('data-page_url');
				  $('#ajax_loader').show();
				  $('#'+value+'').hide();
					 $.ajax({
						 url: page_url,
						 type: 'GET',
						 success: function (res) {
							$('#ajax_loader').hide();
							$('#'+value+'').html(res).show();                        
							common_select(); 
							fRefresh();
								if(execute)
								{
									execute()
								}
								$('[data-toggle="tooltip"]').tooltip();
				  		}
				})
			})
		}
	})
}

function api_dropdown_pagination(value,data){
	$(document).off('change','#'+value+' .api_pagination_select');
	$(document).on('change','#'+value+' .api_pagination_select',function(e){
		e.stopPropagation();
		
		$.each(data,function(index,value){
			if(index != 'api_key'){
				data[index] = $("#"+index).val();
			}
		});

		data.page = $(this).find('option:selected').attr('data-page');
		$("#page").val(data.page);
		page_url = $(this).find('option:selected').attr('data-page_url');
		
		$("#ajax_loader").show();
		$.ajax({
			url: page_url,
			data : data,
			type : 'POST',
			success: function(res){
				$("#ajax_loader").hide();
				$('#'+value).html(res).show();
				$('[data-toggle="tooltip"]').tooltip();
        common_select();
			}
		})
	});
}